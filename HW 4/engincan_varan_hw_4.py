# -*- coding: utf-8 -*-
"""Engincan Varan HW 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13WXBJE9QqeLIMervfLP1tm3tJndHccTK

# Load the dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt                   

df = pd.read_csv('https://raw.githubusercontent.com/OpenClassrooms-Student-Center/Evaluate-Improve-Models/master/house_prices.csv')
df.sample(5)

"""# "Garage Area" and "SalesPrice" features are selected to analyze."""

new_df = df[['Garage Area','SalesPrice']] # code comes here
new_df.sample(5)   #to make sure

"""## Convert the data into numpy arrays of two variables, X and y."""

X = np.array(new_df[['Garage Area']])           # code comes here)
y = np.array(new_df[["SalesPrice"]])            # code comes here)
print(X.shape) # Vewing the shape of X
print(y.shape) # Vewing the shape of y

"""## Split train and test data with 0.2 ratio."""

from sklearn.model_selection import train_test_split
(x_train, x_test, y_train, y_test) = train_test_split(X,y,test_size=0.2) # code comes here

"""# Linear Regression
Train a linear regression.
"""

from sklearn import linear_model 

regressor = linear_model.LinearRegression()     # code comes here

regressor.fit(x_train, y_train)                 # code comes here

"""## Calculate train and test R2."""

from sklearn.metrics import r2_score

y_pred = regressor.predict(x_train)                 # code comes here
print("Train:", r2_score(y_train,y_pred))           # code comes here

y_pred = regressor.predict(x_test)                  # code comes here
print("Test:", r2_score(y_test,y_pred))             # code comes here

"""## Print the bias and the slope."""

print('Regressor coefficient or slope:', regressor.coef_[0][0])          # code comes here
print('Interception point with axis:', regressor.intercept_[0])          # code comes here

"""## Plot the test set with scatter plot and add the linear regression model line.
Remember linear regression recitation.
"""

# Plot a graph with X_test vs y_test
plt.scatter(x_test,y_test, color="blue")
# Regressior line showing
plt.plot(x_train,regressor.predict(x_train), color="red", linewidth=4)
plt.title('Regression(Test Set)')
plt.xlabel('Garage Area')
plt.ylabel('Sales Price')
plt.show()

"""# Multiple Linear Regression
Select all features.
"""

X = df.iloc[:,:304]  # code comes here
y = df[["SalesPrice"]]# code comes here
print(X.shape) # Vewing the shape of X
print(y.shape) # Vewing the shape of y

"""## Rescale the input features. Use MinMaxScaler."""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X = scaler.fit_transform(X)                   # code comes here

"""## Train test split."""

x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2)         # code comes here

"""## Fit regression model."""

regressor = linear_model.LinearRegression()         # code comes here
regressor.fit(x_train,y_train)                      # code comes here

"""## Calculate train and test R2."""

y_pred = regressor.predict(x_train)
print("Train:", r2_score(y_train,y_pred))           # code comes here

y_pred = regressor.predict(x_test)                  # code comes here
print("Test:", r2_score(y_test,y_pred))           # code comes here

"""## Print the regression coefficients."""

print('Regressor coeffients for multiple linear regression:', regressor.coef_[0])          # code comes here)

"""# Ridge Regression
https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html

https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeCV.html

## Use cross-validation to estimate alpha. Set the fold size to 5.
"""

from sklearn.model_selection import KFold
from sklearn.linear_model import RidgeCV
kfold = KFold(n_splits=5, shuffle=True,random_state=5)          # code comes here

alphas=[1e-3, 1e-2, 1e-1, 1, 2, 5, 8, 10]
# Create and fit model
model_rcv = RidgeCV(alphas=alphas, cv=kfold)                    # code comes here
model_rcv.fit(x_train,y_train)                                  # code comes here

"""## Calculate the train and test R2."""

y_pred = model_rcv.predict(x_train)
print("Train:", r2_score(y_train,y_pred))           # code comes here

y_pred = model_rcv.predict(x_test)                  # code comes here
print("Test:", r2_score(y_test,y_pred))           # code comes here

"""## Print the best alpha."""

print("Alpha:", model_rcv.alpha_)                                # code comes here)

"""## Print the regression coefficients."""

print('Regressor coeffients for ridge regression:', model_rcv.coef_[0])            # code comes here)